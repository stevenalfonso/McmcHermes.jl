var documenterSearchIndex = {"docs":
[{"location":"#McmcHermes.jl","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"","category":"section"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"A documentation for the McmcHermes package.","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"McmcHermes provides a simple but efficient way to generate Markov Chain Monte-Carlo algorithms in order to sample a probability density distribution.","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"","category":"page"},{"location":"#Overview","page":"McmcHermes.jl","title":"Overview","text":"","category":"section"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"The major functions in this module are:","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"runmcmc: run multiple chains with a specific number of walkers. get\\flat_chain: get the stored chain of MCMC samples. get_gelman_rubin: get the Gelman Rubin convergence diagnostic of the chains. ","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"note: Note\nThis guide assumes that you already have define your likelihood, prior and the logarithm of the posterior probability as in the example below.","category":"page"},{"location":"#Pkg-Registry","page":"McmcHermes.jl","title":"Pkg Registry","text":"","category":"section"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"using Pkg\nPkg.add(\"McmcHermes\")","category":"page"},{"location":"#Example","page":"McmcHermes.jl","title":"Example","text":"","category":"section"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"First, let's generate some data:","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"using Distributions, Plots, LaTeXStrings, DataFrames, ProgressMeter\n\nmu, sigma = 10, 2\nl_b, u_b = 0, 20\nd = Truncated(Normal(mu, sigma), l_b, u_b)\nN = 1000\ndata = rand(d, N)\n\nhistogram(data, legend=false, size=(300,300), xlabel=\"data\", show=true)","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"In order to sample the posterior probability distribution, it is necessary to define the likelihood, prior and logarithm of the posterior probability.","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"\nfunction log_likelihood(X::Vector, parameters::Vector)\n    mu, sigma = parameters[1], parameters[2]\n    y = 1 ./ (sqrt(2 * pi) .* sigma) .* exp.( -0.5 * ((X .- mu)./sigma).^2 )\n    return sum(log.(y))\nend\n\nfunction log_prior(parameters::Vector)\n    mu, sigma = parameters[1], parameters[2]\n    if 5.0 < mu < 15.0 && 0.0 < sigma < 4.0\n        return 0.0\n    end\n    return -Inf\nend\n\nfunction log_probability(X::Vector, parameters::Vector)\n    lp = log_prior(parameters)\n    if !isfinite(lp)\n        return -Inf\n    end\n    return lp + log_likelihood(X, parameters)\nend","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"Call the McmcHermes package and define the number of walkers, iterations, dimension of the parameter space and the initial guess.","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"using McmcHermes\n\nmu, sigma = 10, 2\ninitparams = Vector{Float64}([mu, sigma])\n\nn_iter, n_walkers = 1000, 200\nn_dim, a = 2, 0.01\n\nchain_tests = run_mcmc(log_probability, data, initparams, n_iter, n_walkers, n_dim, a=a)\nprintln(size(chain_tests))","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"Gelman-Rubin's diagnostic can be obtained from the chains calling the get_gelman_rubin method.","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"println(\"Gelman Rubin Diagnostic: \", get_gelman_rubin(chain_tests))","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"Finally, plot the chains.","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"labels = Tuple([L\"\\mu\", L\"\\sigma\"])\nx = 1:size(chain_tests)[1]\np = []\nfor ind in 1:n_dim\n    push!(p, plot(x, [chain_tests[:,i,ind] for i in 1:size(chain_tests)[2]], legend=false, \n    lc=:black, lw=1, ylabel=labels[ind], alpha = 0.1, xticks=false))\nend\n\nplot(p[1], p[2], layout = (2,1))\nplot!(size=(600,200), xlims = (0, size(chain_tests)[1]), show=true)","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"flat_chains = get_flat_chain(chain_tests, burn_in=100, thin=10)\n\nflat = DataFrame(flat_chains, :auto)\ncolnames = [\"mu\", \"sigma\"]\nflat = rename!(flat, Symbol.(colnames))\n\nusing PairPlots, CairoMakie\npairplot(flat)","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"Develop by Steven Alfonso.","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"","category":"page"},{"location":"","page":"McmcHermes.jl","title":"McmcHermes.jl","text":"Modules = [McmcHermes]","category":"page"}]
}
